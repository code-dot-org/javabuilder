AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Provision an instance of the Javabuilder service. Empty the ContentBucket before deleting this Stack.
Parameters:
  BaseDomainName:
    Type: String
    Description: Base domain name.
  BaseDomainNameHostedZonedID:
    Type: String
    Description: AWS Route53 Hosted Zone ID for base domain name.
  SubDomainName:
    Type: String
    Description: Sub domain name for javabuilder service.
  # LogBucket:
  #   Type: String
  #   Default: cdo-logs.s3.amazonaws.com
  ProvisionedConcurrentExecutions:
    Type: Number
    Description: The amount of provisioned concurrency to allocate for the BuildAndRunJavaProject Lambda.
    MinValue: 1
    Default: 1
  ReservedConcurrentExecutions:
    Type: Number
    Description: The amount of concurrency to allow for the BuildAndRunJavaProject Lambda.
    MinValue: 1
    Default: 3
  LimitPerHour:
    Type: Number
    Description: The number of Javabuilder invocations allowed per user per hour.
    MinValue: 1
    Default: 50
  LimitPerDay:
    Type: Number
    Description: The number of Javabuilder invocations allowed per user per day.
    MinValue: 1
    Default: 150
  TeacherLimitPerHour:
    Type: Number
    Description: The number of Javabuilder invocations allowed for all students in a classroom per hour.
    MinValue: 1
    Default: 1000
  StageName:
    Type: String
    Description: The default stage name in the API Gateway APIs
    Default: Prod
  SilenceAlerts:
    Type: String
    AllowedValues: [true, false]
    Description: If alerts should be silenced on this instance
    Default: false
<%
JAVALAB_APP_TYPES = %w(
  Theater
  Neighborhood
  Console
  Playground
)
-%>
Globals:
  Function:
    Runtime: ruby2.7
    Timeout: 30
    MemorySize: 256
    Tracing: Active
Conditions:
  IsDevCondition: !Equals [!Ref BaseDomainName, "dev-code.org"]
  SilenceAlertsCondition: !Or [Condition: IsDevCondition, !Equals [!Ref SilenceAlerts, "true"]]
Resources:
# Note: We can't update the name of a DomainName resource once it has been created because the
# domain name itself has already been provisioned. When we change from javabuilderbeta to
# javabuilder, we should update the WebSocket resources here to use the prefix "WebSocket"
<%{
  Http: {Prefix: "Http", Suffix: "-http"},
  WebSocket: {Prefix: "", Suffix: ""},
}.each do |apiName, config| -%>
  <%=config[:Prefix]%>Domain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomainName}."
      Name: !Sub "${SubDomainName}<%=config[:Suffix]%>.${BaseDomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt <%=config[:Prefix]%>DomainName.RegionalDomainName
        HostedZoneId: !GetAtt <%=config[:Prefix]%>DomainName.RegionalHostedZoneId

  <%=config[:Prefix]%>DomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub "${SubDomainName}<%=config[:Suffix]%>.${BaseDomainName}"
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref <%=config[:Prefix]%>Certificate
          CertificateName: !Sub "${SubDomainName}<%=config[:Suffix]%>.${BaseDomainName}"

  <%=config[:Prefix]%>Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${SubDomainName}<%=config[:Suffix]%>.${BaseDomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "${SubDomainName}<%=config[:Suffix]%>.${BaseDomainName}"
          HostedZoneId: !Ref BaseDomainNameHostedZonedID

  <%=config[:Prefix]%>DomainNameAPIMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - <%=config[:Prefix]%>Domain
    Properties:
      ApiId: !Ref <%=apiName%>API
      DomainName: !Sub "${SubDomainName}<%=config[:Suffix]%>.${BaseDomainName}"
      Stage: !Ref <%=apiName%>Stage

<%end -%>
  HttpAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${SubDomainName}-http.${BaseDomainName}"
      ProtocolType: HTTP

  PutRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpAPI
      RouteKey: PUT /seedsources/sources.json
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref HttpAuthorizer
      OperationName: PutRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PutIntegration

  PutSourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Puts user sources into the S3 bucket
      CodeUri: api-gateway-routes/
      Handler: api_gateway_put_function.lambda_handler
      Role: !ImportValue JavabuilderPutSourcesLambdaRole
      Environment:
        Variables:
          CONTENT_BUCKET_NAME: !Ref ContentBucket

  PutSourcesPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PutSourcesFunction
      Principal: apigateway.amazonaws.com

  PutIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpAPI
      Description: PUT Integration
      # Integration method must be POST for AWS_PROXY integrations even though we're PUTting into an S3 bucket
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutSourcesFunction.Arn}/invocations
      PayloadFormatVersion: 2.0

  HttpStageLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/accesslog/${SubDomainName}-http.${BaseDomainName}"

  HttpStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      # Using AutoDeploy rather than a Deployment resource (as we do with the WebSocket API) because
      # the Deployment resource doesn't seem to work with HTTP APIs.
      AutoDeploy: true
      StageName: !Sub "${StageName}"
      Description: The stage to deploy
      ApiId: !Ref HttpAPI
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      AccessLogSettings:
        DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/accesslog/${SubDomainName}-http.${BaseDomainName}"
        # TODO: Also log authorizer status code, authorizer error message, Javabuilder session id, and Origin.
        Format: '{
            "host": "$context.domainName",
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "requestTime": "$context.requestTime",
            "httpMethod": "$context.httpMethod",
            "caller": "$context.identity.caller",
            "routeKey": "$context.routeKey",
            "status": "$context.status",
            "protocol": "$context.protocol",
            "userAgent": "$context.identity.userAgent",
            "responseLength":"$context.responseLength",
            "contextErrorMessage": "$context.error.message",
            "contextErrorMessageString": "$context.error.messageString",
            "integrationError": "$context.integration.error",
            "authorizerError": "$context.authorizer.error"
          }'

  HttpAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref HttpAPI
      AuthorizerCredentialsArn:
        Fn::ImportValue: JavabuilderAPIGatewayRole
      AuthorizerPayloadFormatVersion: 2.0
      AuthorizerResultTtlInSeconds: 0
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpAuthorizerLambda.Arn}/invocations"
      IdentitySource:
        - "$request.querystring.Authorization"
      Name: HttpAuthorizer

  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${SubDomainName}.${BaseDomainName}"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketAuthorizer
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref WebSocketAPI
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketAuthorizerLambda.Arn}/invocations"
      IdentitySource:
        - route.request.querystring.Authorization
      Name: WebSocketAuthorizer

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSessionAndRelayMessagesFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: DefaultIntegration

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Lambda Proxy Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSessionAndRelayMessagesFunction.Arn}/invocations"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSessionAndRelayMessagesFunction.Arn}/invocations

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DefaultRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketAPI

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Sub "${StageName}"
      Description: The stage to deploy
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketAPI
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: true
      AccessLogSettings:
        DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/accesslog/${SubDomainName}.${BaseDomainName}"
        # TODO: Also log authorizer status code, authorizer error message, Javabuilder session id, and Origin.
        Format: '{
            "host": "$context.domainName",
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "requestTime": "$context.requestTime",
            "method": "$context.httpMethod",
            "caller": "$context.identity.caller",
            "eventType": "$context.eventType",
            "routeKey": "$context.routeKey",
            "status": "$context.status",
            "connectionId": "$context.connectionId",
            "protocol": "$context.protocol",
            "userAgent": "$context.identity.userAgent",
            "contextErrorMessage": "$context.error.message",
            "contextErrorMessageString": "$context.error.messageString",
            "integrationError": "$context.integration.error",
            "authorizerError": "$context.authorizer.error"
          }'

  StartSessionAndRelayMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Starts the long-running Lambda that compiles and runs a JavaLab project and relays messages to it from the JavaLab client.
      CodeUri: api-gateway-routes/
      Handler: api_gateway_proxy_function.lambda_handler
      Role: !ImportValue JavabuilderSessionManagerMessageRelayLambdaRole
      Environment:
        Variables:
          # The Logical ID of the BuildAndRun Lambda Alias, which is generated by SAM because AutoPublishAlias is enabled
          # has a predictable format: <function‑LogicalId>Alias<alias‑name>
          # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources-function.html#sam-specification-generated-resources-function-autopublishalias
<%JAVALAB_APP_TYPES.each do | name | -%>
          BUILD_AND_RUN_<%=name.upcase%>_PROJECT_LAMBDA_ARN: !Ref BuildAndRunJava<%=name%>ProjectFunctionAliaslive
<%end -%>

  StartSessionAndRelayMessagesPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartSessionAndRelayMessagesFunction
      Principal: apigateway.amazonaws.com

# AWS does not seem to be case sensitive, but is case aware. Therefore, we can't update from
# Websocket here to WebSocket as is used elsewhere when updating an existing stack. Updating this is
# a step we should take when we create our non-beta environment from scratch. At that point, we
# should also update uses of HttpAPI and WebSocketAPI to be HttpApi and WebSocketApi, respectively,
# to match the AWS standard elsewhere in this template. Example: "AWS::ApiGatewayV2::ApiMapping"
#
# Note: hourly and daily limit values provided to both authorizers here as environment variables,
# but are only needed in the HTTP authorizer.
# Both authorizers need to access the token_status DynamoDB table, but only the HTTP authorizer
# needs to access to the other tables.
<%{
  Http: {
    LambdaName: "Http",
    Handler: "http_authorizer_function",
    Description: "'Authorize PUT by decoding JWT in Authorization querystring parameter.'"
  },
  WebSocket: {
    LambdaName: "Websocket",
    Handler: "websocket_authorizer_function",
    Description: "'Authorize WebSocket connect by decoding JWT in Authorization querystring parameter.'"
  },
}.each do |name, config| -%>
  <%=config[:LambdaName]%>AuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: <%=config[:Handler]%>.lambda_handler
      CodeUri: javabuilder-authorizer/
      Description: <%=config[:Description]%>
      Timeout: 3
      Role: !ImportValue JavabuilderAuthorizerLambdaRole
      Environment:
        Variables:
          limit_per_hour: !Ref LimitPerHour
          limit_per_day: !Ref LimitPerDay
          teacher_limit_per_hour: !Ref TeacherLimitPerHour
          blocked_users_table: !Ref BlockedUsersTable
          token_status_table: !Ref TokenStatusTable
          user_requests_table: !Ref UserRequestsTable
          teacher_associated_requests_table: !Ref TeacherAssociatedRequestsTable

  <%=name%>AuthorizerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - <%=name%>Authorizer
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref <%=config[:LambdaName]%>AuthorizerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${<%=name%>API}/authorizers/${<%=name%>Authorizer}"

<%end -%>
  ChangeJavaRuntimeDirectoryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - java11
      ContentUri: org-code-javabuilder/change_runtime_directory
      Description: Change Java runtime to launch from the writeable /tmp directory to enable student projects to write files more easily.
      LayerName: change-java-runtime-directory

  FontConfigurationLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - java11
      ContentUri: org-code-javabuilder/font_config.zip
      Description: Add a font configuration file to enable use of fonts.
      LayerName: font-configuration

<%{
  Theater: {MemorySize: 1769, Timeout: 90},
  Neighborhood: {MemorySize: 512, Timeout: 90},
  Console: {MemorySize: 512, Timeout: 90},
  Playground: {MemorySize: 512, Timeout: 300}
}.each do |name, config| -%>
  BuildAndRunJava<%=name%>ProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref FontConfigurationLayer
        - !Ref ChangeJavaRuntimeDirectoryLayer
      Handler: org.code.javabuilder.LambdaRequestHandler::handleRequest
      Runtime: java11
      CodeUri: org-code-javabuilder/lib/build/distributions/lib.zip
      AutoPublishAlias: live
      ReservedConcurrentExecutions: !Ref ReservedConcurrentExecutions
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref ProvisionedConcurrentExecutions
      Description: Compile and execute a JavaLab <%=name%> project.
      MemorySize: <%=config[:MemorySize]%>
      Timeout: <%=config[:Timeout]%>
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Role:
        Fn::ImportValue: JavabuilderBuildAndRunLambdaRole
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/change_runtime_directory
          CONTENT_BUCKET_NAME: !Ref ContentBucket
          CONTENT_BUCKET_URL: !Sub "https://${ContentDomain}"
          API_ENDPOINT: !Sub
            - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
            - ApiId: !Ref WebSocketAPI
<%end -%>

  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If [IsDevCondition, !Sub "cdo-dev-${SubDomainName}-content", !Sub "cdo-${SubDomainName}-content"]
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: 1

  ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContentBucket
      PolicyDocument:
        Statement:
        - Action: ['s3:GetObject']
          Effect: Allow
          Resource: !Sub "arn:aws:s3:::${ContentBucket}/*"
          Principal: '*'

  ContentAPICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${SubDomainName}-content.${BaseDomainName}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "${SubDomainName}-content.${BaseDomainName}"
          HostedZoneId: !Ref BaseDomainNameHostedZonedID

  ContentDomain:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomainName}."
      Name: !Sub "${SubDomainName}-content.${BaseDomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt ContentCDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases

  ContentCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases: [!Sub "${SubDomainName}-content.${BaseDomainName}"]
        ViewerCertificate:
          AcmCertificateArn: !Ref ContentAPICertificate
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ErrorCachingMinTTL: 0
        # TODO: enable logging when LogBucket is set up
        # Logging:
        #   Bucket: !Ref LogBucket
        #   IncludeCookies: false
        #   Prefix: !Sub "${SubDomainName}-content.${BaseDomainName}"
        Origins:
          - Id: ContentBucket
            DomainName: !GetAtt ContentBucket.DomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: ContentBucket
          AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
          Compress: true
          DefaultTTL: 0
          ForwardedValues: {QueryString: true}
          ViewerProtocolPolicy: redirect-to-https

  HighConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubDomainName}_high_concurrent_executions"
      AlarmDescription: !Sub |
          This will page the DOTD if javabuilder usage exceeds 50 concurrent
          executions for 10 minutes. Occasional spikes are expected, but
          long-running high usage is an indication of an attack. Go to the
          following URLs and set reserved concurrency to 10 immediately
<%JAVALAB_APP_TYPES.each do | name | -%>
          https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${BuildAndRunJava<%=name%>ProjectFunction}/edit/concurrency?tab=configure
<%end -%>
          Then post in #ap-csa-dev.
      ActionsEnabled: true
      AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"]
      EvaluationPeriods: 10
      DatapointsToAlarm: 10
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Concurrent Executions Across All Lambdas
          ReturnData: true
          Expression: SUM(METRICS())
<%{Theater: "m2", Neighborhood: "m3", Console: "m4", Playground: "m5"}.each do |name, id| -%>
        - Id: <%=id%>
          ReturnData: false
          MetricStat:
              Metric:
                  Namespace: AWS/Lambda
                  MetricName: ConcurrentExecutions
                  Dimensions:
                      - Name: FunctionName
                        Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
              Period: 60
              Stat: Maximum
<%end -%>

  HighWebsocketConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubDomainName}_high_websocket_connections"
      AlarmDescription: Significantly higher websocket connections than normal detected. Investigate if there is a DDOS.
      ActionsEnabled: false
      EvaluationPeriods: 20
      DatapointsToAlarm: 20
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: m1
            ReturnData: true
            MetricStat:
                Metric:
                    Namespace: AWS/ApiGateway
                    MetricName: ConnectCount
                    Dimensions:
                        - Name: Stage
                          Value: !Sub "${StageName}"
                        - Name: ApiId
                          Value: !Ref WebSocketAPI
                Period: 60
                Stat: Sum
          - Id: ad1
            Label: ConnectCount (expected)
            ReturnData: true
            Expression: ANOMALY_DETECTION_BAND(m1, 8)
      ThresholdMetricId: ad1

<%JAVALAB_APP_TYPES.each do | name | -%>

  <%=name%>HighSevereErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubDomainName}_<%=name.downcase%>_high_severe_error_rate"
      AlarmDescription: Send page if Javabuilder severe error rate exceeds 10% for 20
          minutes. Occasional spikes are expected, but a sustained high error rate
          is an indication of an outage.
      ActionsEnabled: true
      AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Javabuilder-high-error-rate"]
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Error Rate (%)
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: Javabuilder <%=name%> "SEVERE" errors
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
                Period: 300
                Stat: Sum

  <%=name%>HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubDomainName}_build_and_run_<%=name.downcase%>_lambda_error_rate"
      AlarmDescription: Error rate in Javabuilder's <%=name%> build and run lambda (the core of
          Javabuilder, which executes student <%=name%> code) exceeded 10% for four
          consecutive 5 minute periods.
      ActionsEnabled: true
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-build-and-run-lambda-error-rate"]
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 25
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Errors / Invocations
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Errors
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
                Period: 300
                Stat: Sum

  <%=name%>SlowCleanupTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubDomainName}_<%=name.downcase%>_slow_cleanup_time"
      AlarmDescription: p(95) cleanup time in Javabuilder's <%=name%> build and run lambda exceeded
        the normal cleanup time for 15 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      EvaluationPeriods: 15
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: ignore
      Metrics:
          - Id: m1
            ReturnData: true
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: CleanupTime
                    Dimensions:
                        - Name: functionName
                          Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
                Period: 60
                Stat: p95
          - Id: ad1
            Label: CleanupTime (expected)
            ReturnData: true
            Expression: ANOMALY_DETECTION_BAND(m1, 5)
      ThresholdMetricId: ad1
  
  <%=name%>SlowColdBootTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubDomainName}_<%=name.downcase%>_slow_cold_boot_time"
      AlarmDescription: p(95) cold boot time in Javabuilder's <%=name%> build and run lambda exceeded
        the normal cleanup time for 15 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      EvaluationPeriods: 15
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: ignore
      Metrics:
          - Id: m1
            ReturnData: true
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: ColdBootTime
                    Dimensions:
                        - Name: functionName
                          Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
                Period: 60
                Stat: p95
          - Id: ad1
            Label: ColdBootTime (expected)
            ReturnData: true
            Expression: ANOMALY_DETECTION_BAND(m1, 2)
      ThresholdMetricId: ad1

  <%=name%>SlowInitializationTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubDomainName}_<%=name.downcase%>_slow_initialization_time"
      AlarmDescription: p(95) initialization time in Javabuilder's <%=name%> build and run lambda exceeded
        the normal cleanup time for 15 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      EvaluationPeriods: 15
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanUpperThreshold
      TreatMissingData: ignore
      Metrics:
          - Id: m1
            ReturnData: true
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: InitializationTime
                    Dimensions:
                        - Name: functionName
                          Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
                Period: 60
                Stat: p95
          - Id: ad1
            Label: InitializationTime (expected)
            ReturnData: true
            Expression: ANOMALY_DETECTION_BAND(m1, 5)
      ThresholdMetricId: ad1
  
  <%=name%>SlowTransitionTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubDomainName}_<%=name.downcase%>_slow_transition_time"
        AlarmDescription: p(95) transition time in Javabuilder's <%=name%> build and run lambda exceeded
          the normal cleanup time for 15 minutes. Investigate if there has been a performance regression.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
        InsufficientDataActions: []
        EvaluationPeriods: 15
        DatapointsToAlarm: 15
        ComparisonOperator: GreaterThanUpperThreshold
        TreatMissingData: missing
        Metrics:
            - Id: m1
              ReturnData: true
              MetricStat:
                  Metric:
                      Namespace: Javabuilder
                      MetricName: TransitionTime
                      Dimensions:
                          - Name: functionName
                            Value: !Ref BuildAndRunJava<%=name%>ProjectFunction
                  Period: 60
                  Stat: p95
            - Id: ad1
              Label: TransitionTime (expected)
              ReturnData: true
              Expression: ANOMALY_DETECTION_BAND(m1, 3)
        ThresholdMetricId: ad1

<%end -%>

# We use shortened versions of names for partition keys (eg, user_id),
# but values will be a concatenation of the domain name and appropriate ID.
# Values will look something like:
# studio.code.org#123456 (user_requests table)
# studio.code.org#UserId#123456 (blocked_users table)
<%
  DOMAIN_AND_USER_ID_COMPOSITE_ATTRIBUTE_NAME = 'user_id'
  DOMAIN_AND_SECTION_OWNER_ID_COMPOSITE_ATTRIBUTE_NAME = 'section_owner_id'
  TOKEN_ID_ATTRIBUTE_NAME = 'token_id'
  ISSUED_AT_TIMESTAMP_ATTRIBUTE_NAME = 'issued_at'
  TIME_TO_LIVE_ATTRIBUTE_NAME = 'ttl'
-%>
  BlockedUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubDomainName}_blocked_users"
      KeySchema:
        - AttributeName: <%=DOMAIN_AND_USER_ID_COMPOSITE_ATTRIBUTE_NAME%>
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: <%=DOMAIN_AND_USER_ID_COMPOSITE_ATTRIBUTE_NAME%>
          AttributeType: S
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  TokenStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubDomainName}_tokens"
      KeySchema:
        - AttributeName: <%=TOKEN_ID_ATTRIBUTE_NAME%>
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: <%=TOKEN_ID_ATTRIBUTE_NAME%>
          AttributeType: S
      TimeToLiveSpecification:
        AttributeName: <%=TIME_TO_LIVE_ATTRIBUTE_NAME%>
        Enabled: true

  UserRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubDomainName}_user_requests"
      KeySchema:
        - AttributeName: <%=DOMAIN_AND_USER_ID_COMPOSITE_ATTRIBUTE_NAME%>
          KeyType: HASH
        - AttributeName: <%=ISSUED_AT_TIMESTAMP_ATTRIBUTE_NAME%>
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: <%=DOMAIN_AND_USER_ID_COMPOSITE_ATTRIBUTE_NAME%>
          AttributeType: S
        - AttributeName: <%=ISSUED_AT_TIMESTAMP_ATTRIBUTE_NAME%>
          AttributeType: N
      TimeToLiveSpecification:
        AttributeName: <%=TIME_TO_LIVE_ATTRIBUTE_NAME%>
        Enabled: true

  TeacherAssociatedRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubDomainName}_teacher_associated_requests"
      KeySchema:
        - AttributeName: <%=DOMAIN_AND_SECTION_OWNER_ID_COMPOSITE_ATTRIBUTE_NAME%>
          KeyType: HASH
        - AttributeName: <%=ISSUED_AT_TIMESTAMP_ATTRIBUTE_NAME%>
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: <%=DOMAIN_AND_SECTION_OWNER_ID_COMPOSITE_ATTRIBUTE_NAME%>
          AttributeType: S
        - AttributeName: <%=ISSUED_AT_TIMESTAMP_ATTRIBUTE_NAME%>
          AttributeType: N
      TimeToLiveSpecification:
        AttributeName: <%=TIME_TO_LIVE_ATTRIBUTE_NAME%>
        Enabled: true
Outputs:
  JavabuilderURL:
    Value:
      Fn::Sub: wss://${SubDomainName}.${BaseDomainName}

{
  "source": {
    "Grid.java": {
      "text": "import java.util.ArrayList;\nimport java.io.File; // Import the File class\nimport java.io.FileNotFoundException; // Import this class to handle errors\nimport java.util.Scanner; // Import the Scanner class to read text files\nimport java.io.FileInputStream; // Import the Scanner class to read text files\nimport java.lang.System;\n\npublic class Grid {\n\tprivate static Grid instance = null;\n\tprivate GridSquare[][] grid;\n\tprivate int width;\n\tprivate int height;\n\n\tpublic static Grid getInstance() {\n\t\tif (instance == null) {\n\t\t\tFile file = new File(\"grid.txt\");\n\t\t\tFileInputStream fis;\n\t\t\ttry {\n\t\t\t\tfis = new FileInputStream(file);\n\t\t\t\tbyte[] data = new byte[(int) file.length()];\n\t\t\t\tfis.read(data);\n\t\t\t\tfis.close();\n\t\t\t\tinstance = new Grid(new String(data, \"UTF-8\"));\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"\\nTry adding a grid.txt file.\\n\");\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn null;\n\t\t\t\t// System.exit(1);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n\n\tprivate Grid(String gridDescription) {\n\t\tString[] lines = gridDescription.split(\"\\n\");\n\t\tthis.height = lines.length;\n\n\t\t// TODO: support paint count > 10\n\t\tthis.width = (lines[0].length() + 1) / 2;\n\n\t\tthis.grid = new GridSquare[width][height];\n\n\t\tint currentHeight = this.height;\n\t\tfor (int currentY = 0; currentY < lines.length; currentY++) {\n\t\t\tcurrentHeight--;\n\t\t\tString line = lines[currentHeight];\n\t\t\tString[] descriptors = line.split(\",\");\n\t\t\tif (descriptors.length != width) {\n\t\t\t\tSystem.out.println(\"width of line \" + line + \" does not match others. Cannot create grid.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (int currentX = 0; currentX < descriptors.length; currentX++) {\n\t\t\t\tString descriptor = descriptors[currentX];\n\t\t\t\tthis.grid[currentX][currentY] = new GridSquare(descriptor);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void printGrid() {\n\t\tfor (int y = height - 1; y >= 0; y--) {\n\t\t\tArrayList<String> squares = new ArrayList<String>();\n\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\tsquares.add(grid[x][y].getPrintableDescription());\n\t\t\t}\n\t\t\tSystem.out.println(String.join(\",\", squares));\n\t\t}\n\t}\n\n\t// Determines whether the given coordinate can be moved into\n\tpublic boolean validLocation(int x, int y) {\n\t\treturn x >= 0 && y >= 0 && x < width && y < height && grid[x][y].isPassable();\n\t}\n\n\t// Returns the GridSquare at the given position\n\tpublic GridSquare getSquare(int x, int y) {\n\t\tif (validLocation(x, y)) {\n\t\t\treturn grid[x][y];\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"fail\");\n\t\t}\n\t}\n\n\t// Hides all buckets from the screen\n\tpublic void hideBuckets() {\n\t\tSystem.out.println(\"You hid the buckets\");\n\t}\n\n\t// Displays all buckets on the screen\n\tpublic void showBuckets() {\n\t\tSystem.out.println(\"You displayed the buckets\");\n\t}\n}",
      "visible": false
    },
    "Direction.java": {
      "text": "public class Direction {\n  private enum CompassDirection{NORTH, EAST, SOUTH, WEST};\n  private CompassDirection direction;\n  \n  public Direction(String startingDirection) {\n    if(startingDirection.equalsIgnoreCase(\"north\")) {\n      this.direction = CompassDirection.NORTH;      \n    } else if(startingDirection.equalsIgnoreCase(\"east\")) {\n      this.direction = CompassDirection.EAST;      \n    } else if(startingDirection.equalsIgnoreCase(\"south\")) {\n      this.direction = CompassDirection.SOUTH;      \n    } else if(startingDirection.equalsIgnoreCase(\"west\")) {\n      this.direction = CompassDirection.WEST;  \n    } else  {\n      System.out.println(\"bad direction\");\n    }\n  }\n  \n  //Changes the direction one compassDirection left (i.e. NORTH -> WEST)\n  public void turnLeft() {\n    if (this.direction == CompassDirection.NORTH) {\n      this.direction = CompassDirection.WEST;\n    } else {\n      this.direction = CompassDirection.values() [this.direction.ordinal() - 1];\n    }\n    System.out.println(\"pointing \" + this.direction);\n  }\n  \n  //Returns true if the current direction is north\n  public boolean isNorth() {\n    return this.direction == CompassDirection.NORTH;\n  }\n  \n  //Returns true if the current direction is south\n  public boolean isSouth() {\n    return this.direction == CompassDirection.SOUTH;\n  }\n \n  // Returns true if the current direction is east\n  public boolean isEast() {\n    return this.direction == CompassDirection.EAST;\n  }\n \n  // Returns true if the current direction is west\n  public boolean isWest() {\n    return this.direction == CompassDirection.WEST;\n  }\n}",
      "visible": false
    },
    "GridSquare.java": {
      "text": "public class GridSquare {\n\t  private String color;\n\t  private boolean passable;\n\t  private int paintCount;\n\t  \n\t  public GridSquare(String descriptor) {\n\t    this.color = \"\";\n\t    this.passable = !descriptor.equals(\"x\");\n\t      try {  \n\t        this.paintCount = Integer.parseInt(descriptor);\n\t      } catch (NumberFormatException e) {  \n\t        this.paintCount = 0; \n\t      }\n\t  }\n\t  \n\t  // Sets the color of the square to the given color\n\t  public void setColor(String color) {\n\t    if (color.length() > 1) {\n\t      System.out.println(\"use a 1 letter character to set your color\");\n\t      return;\n\t    }\n\t    if (this.passable && this.paintCount == 0) {\n\t      this.color = color;\n\t    }\n\t  }\n\t  \n\t  // Determines whether the given coordinate can be moved into\n\t  public boolean isPassable() {\n\t    return this.passable;\n\t  }\n\t  \n\t  // Decreases the paintCount by 1 if there is available paint\n\t  public void collectPaint() {\n\t    if (this.containsPaint()) {\n\t      this.paintCount--;\n\t    } else {\n\t      System.out.println(\"There's no paint to collect here\");\n\t    }\n\t  }\n\t  \n\t  // Returns the square to a non-painted state\n\t  public void removePaint() {\n\t    if (!this.color.equals(\"\")) {\n\t      this.color = \"\";\n\t    } else {\n\t      System.out.println(\"There's no paint to remove here\");\n\t    }\n\t  }\n\t  \n\t  // Returns true if the square has paint available to collect\n\t  public boolean containsPaint() {\n\t    return this.paintCount > 0;\n\t  }\n\t  \n\t  public String getPrintableDescription() {\n\t    if (!this.passable) {\n\t      return \"x\";\n\t    } else if (!this.color.equals(\"\")) {\n\t      return this.color;\n\t    } else {\n\t      return String.valueOf(this.paintCount);\n\t    }\n\t  }\n\t  \n\t  // Returns true if the color variable is populated\n\t  public boolean hasColor() {\n\t    return !this.color.equals(\"\");\n\t  }\n\t  \n\t  // Returns the color of the square\n\t  public String getColor() {\n\t    return this.color;\n\t  }\n\t}",
      "visible": false
    },
    "Main.java": {
      "text": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tPainter karel = new Painter(0, 0, \"East\", 0);\n\t\tGrid globalGrid = Grid.getInstance();\n\t\tif (globalGrid == null) {\n\t\t\tSystem.out.println(\"Grid is null!\");\n\t\t\treturn;\n\t\t}\n\t\tglobalGrid.printGrid();\n\n\t\tkarel.paint(\"r\");\n\t\t// To Do: Write your code below this comment\n\t\twhile (karel.canMove()) {\n\t\t\tkarel.move();\n\t\t\tkarel.paint(\"r\");\n\t\t}\n\t\tkarel.turnLeft();\n\t\tkarel.paint(\"g\");\n\t\twhile (karel.canMove()) {\n\t\t\tkarel.move();\n\t\t\tkarel.paint(\"b\");\n\t\t}\n\n\t\tglobalGrid.printGrid();\n\t}\n}\n",
      "visible": true
    },
    "Painter.java": {
      "text": "public class Painter {\n  private int xLocation;\n  private int yLocation;\n  private Direction direction;\n  private int remainingPaint;\n  private Grid grid;\n  \n  public Painter(int x, int y, String direction, int paint) {\n    this.xLocation = x;\n    this.yLocation = y;\n    this.direction = new Direction(direction);\n    this.remainingPaint = paint;\n    this.grid = Grid.getInstance();\n    \n    System.out.println(\"created painter\");\n  }\n\n  public Painter(Grid grid) {\n    this.xLocation = 0;\n    this.yLocation = 0;\n    this.direction = new Direction(\"north\");\n    this.remainingPaint = 0;\n    this.grid = grid;\n    \n    System.out.println(\"created painter\");\n  }\n  \n  // Turn the painter one compass direction left (i.e. North -> West)\n  public void turnLeft() {\n    this.direction.turnLeft();\n  }\n  \n  // Move the painter one square forward in the direction the painter\n  // is facing\n  public void move() {\n    if (this.validMovement(this.direction)) {\n      if (this.direction.isNorth()) {\n        this.yLocation++;\n      } else if (this.direction.isSouth()) {\n        this.yLocation--;\n      } else if (this.direction.isEast()) {\n        this.xLocation++;\n      } else {\n        this.xLocation--;\n      }\n    } else {\n      System.out.println(\"You can't go that way\");\n    }\n    System.out.println(\"New (x,y) : (\" + this.xLocation + \",\" + this.yLocation + \")\");\n  }\n  \n  // Add paint of the given color to the grid at the location where the\n  // painter currently is\n  public void paint(String color) {\n    this.grid.getSquare(this.xLocation, this.yLocation).setColor(color);\n  }\n  \n  // removes all paint on the square where the painter is standing\n  public void scrapePaint() {\n    this.grid.getSquare(this.xLocation, this.yLocation).removePaint();\n  }\n  \n  // Returns how many units of paint are in the painter's personal\n  // bucket\n  public int getMyPaint() {\n    return this.remainingPaint;\n  }\n\n  // Hides the painter on the screen\n  public void hidePainter() {\n    System.out.println(\"You hid the painter\");\n  }\n\n  // Shows the painter on the screen\n  public void showPainter() {\n    System.out.println(\"You displayed the painter\");\n  }\n  \n  // Painter adds a single unit of paint to their personal bucket\n  // Counter on the bucket on the screen goes down. If the painter\n  // is not standing on a paint bucket, nothing happens\n  public void takePaint() {\n    if (this.grid.getSquare(this.xLocation, this.yLocation).containsPaint()) {\n      this.grid.getSquare(this.xLocation, this.yLocation).collectPaint();\n      this.remainingPaint++;\n    } else {\n      System.out.println(\"There is no paint to collect here\");\n    }\n  }\n  \n  // Returns True if there is paint in the square where the painter\n  // is standing.\n  public Boolean isOnPaint() {\n    return this.grid.getSquare(this.xLocation, this.yLocation).hasColor();\n  }\n\n  // Returns True if there is a paint bucket in the square where the\n  // painter is standing.\n  public Boolean isOnBucket() {\n    return this.grid.getSquare(this.xLocation, this.yLocation).containsPaint();\n  }\n\n  // Returns True if remainingPaint > 0\n  public Boolean hasPaint() {\n    return this.remainingPaint > 0;\n  }\n\n  private Boolean validMovement(Direction direction) {\n    if (direction.isNorth()) {\n      return this.grid.validLocation(this.xLocation, this.yLocation + 1);\n    } else if (this.direction.isSouth()) {\n      return this.grid.validLocation(this.xLocation, this.yLocation -1);\n    } else if (this.direction.isEast()) {\n      return this.grid.validLocation(this.xLocation + 1, this.yLocation);\n    } else {\n      return this.grid.validLocation(this.xLocation - 1, this.yLocation);\n    }\n  }\n\n  // Returns True if there is no barrier one square ahead in the\n  // requested direction. \n  public Boolean canMove(String direction) {\n    return validMovement(new Direction(direction));\n  }\n\n  // Returns True if there is no barrier one square ahead in the\n  // current direction. \n  public Boolean canMove() {\n    return validMovement(this.direction);\n  }\n  \n  // Returns the color of the square where the painter is standing\n  public String getColor() {\n    return this.grid.getSquare(this.xLocation, this.yLocation).getColor();\n  }\n\n  // returns True if facing North.\n  public Boolean facingNorth() {\n    return this.direction.isNorth();\n  }\n\n  // returns True if facing East.\n  public Boolean facingEast() {\n    return this.direction.isEast();\n  }\n  \n  // returns True if facing South.\n  public Boolean facingSouth() {\n    return this.direction.isSouth();\n  }\n\n  // returns True if facing West.\n  public Boolean facingWest() {\n    return this.direction.isWest();\n  }\n}",
      "visible": true
    },
    "grid.txt": {
      "text": "1,0,0,0\n3,0,1,2\n0,0,0,0\n",
      "visible": true
    }
  },
  "animations": {}
}

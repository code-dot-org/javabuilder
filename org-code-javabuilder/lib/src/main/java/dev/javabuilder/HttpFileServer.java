package dev.javabuilder;

import static dev.javabuilder.LocalWebserverConstants.DIRECTORY;
import static dev.javabuilder.LocalWebserverConstants.SEED_SOURCES_ENDPOINT;
import static org.code.protocol.AllowedFileNames.PROMPTER_FILE_NAME_PREFIX;

import dev.javabuilder.util.TempDirectoryUtils;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.code.javabuilder.ProjectData;

/**
 * This sets up an HTTP server for local development when the client needs to be able to access
 * files generated by Javabuilder (such as when using Theater). In production, this is handled by
 * S3.
 */
@WebServlet(
    name = "FileServlet",
    urlPatterns = {"/" + DIRECTORY + "/*"})
public class HttpFileServer extends HttpServlet {
  public HttpFileServer() {
    System.out.println(System.getProperty("java.io.tmpdir"));
  }
  /**
   * Returns the file requested by the client. Listens at http://localhost:8080/files/<filename>.
   */
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    // https://docs.oracle.com/javaee/5/api/javax/servlet/ServletResponse.html
    // https://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletResponse.html
    // NOTE: This is _NOT_ a safe method of handling requests from a client. We are serving
    // filesystem files to the user without authentication/authorization. This should _ONLY_ be used
    // for local development.

    final String fileName = this.getFileName(request);
    OutputStream out = response.getOutputStream();
    Files.copy(Paths.get(System.getProperty("java.io.tmpdir"), DIRECTORY, fileName), out);
    out.flush();
  }

  @Override
  protected void doPut(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    String fileName = this.getFileName(request);
    if (!this.putAllowed(fileName)) {
      response.sendError(
          403,
          String.format(
              "Only files sent to the %s endpoint, or prefixed with %s can be uploaded.",
              SEED_SOURCES_ENDPOINT, PROMPTER_FILE_NAME_PREFIX));
      return;
    }

    if (fileName.equals(SEED_SOURCES_ENDPOINT)) {
      // If a client is accessing this endpoint, they are uploading project data as a JSON payload.
      // Use the pre-defined project data file name (rather than the endpoint name).
      fileName = ProjectData.PROJECT_DATA_FILE_NAME;
    }

    TempDirectoryUtils.createTempDirectoryIfNeeded();
    Files.copy(
        request.getInputStream(),
        Paths.get(System.getProperty("java.io.tmpdir"), DIRECTORY, fileName),
        StandardCopyOption.REPLACE_EXISTING);
  }

  private boolean putAllowed(String fileName) {
    return fileName.indexOf(PROMPTER_FILE_NAME_PREFIX) == 0
        || fileName.equals(SEED_SOURCES_ENDPOINT);
  }

  private String getFileName(HttpServletRequest request) {
    final String[] urlParts = request.getRequestURI().split("/");
    return urlParts[urlParts.length - 1];
  }
}

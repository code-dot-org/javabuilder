package dev.javabuilder;

import static dev.javabuilder.LocalWebserverConstants.DIRECTORY;
import static org.code.protocol.AllowedFileNames.THEATER_AUDIO_NAME;
import static org.code.protocol.AllowedFileNames.THEATER_IMAGE_NAME;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * This sets up an HTTP server for local development when the client needs to be able to access
 * files generated by Javabuilder (such as when using Theater). In production, this is handled by
 * S3.
 */
@WebServlet(
    name = "FileServlet",
    urlPatterns = {
      "/" + DIRECTORY + "/" + THEATER_IMAGE_NAME,
      "/" + DIRECTORY + "/" + THEATER_AUDIO_NAME
    })
public class HttpFileServer extends HttpServlet {
  /**
   * Returns the file requested by the client. Listens at http://localhost:8080/files/<filename>.
   */
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    // https://docs.oracle.com/javaee/5/api/javax/servlet/ServletResponse.html
    // https://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpServletResponse.html
    // NOTE: This is _NOT_ a safe method of handling requests from a client. We are serving
    // filesystem files to the user without authentication/authorization. This should _ONLY_ be used
    // for local development.
    String[] urlParts = request.getRequestURI().split("/");
    String fileName = urlParts[urlParts.length - 1];
    if (!fileName.equals(THEATER_IMAGE_NAME) && !fileName.equals(THEATER_AUDIO_NAME)) {
      response.sendError(
          403,
          String.format("Only %s and %s can be accessed.", THEATER_IMAGE_NAME, THEATER_AUDIO_NAME));
      return;
    }
    OutputStream out = response.getOutputStream();
    Files.copy(Paths.get(System.getProperty("java.io.tmpdir"), DIRECTORY, fileName), out);
    out.flush();
  }
}

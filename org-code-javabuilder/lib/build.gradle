/*
 * Usage:
 * ./gradlew goJF -> runs the linter and fixes files
 * ./gradlew verGJF -> just runs the linter
 * ./gradlew buildZip -> builds a zip package that is compatible with AWS Lambda
 * ./gradlew appRun -> runs the WebSocket server for local development
 * ./gradlew test -> runs the unit tests
 */

plugins {
    id "org.gretty" version "3.0.5"
    id 'application'
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.amazonaws/aws-lambda-java-core
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-apigatewaymanagementapi
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-apigatewaymanagementapi', version: '1.11.978'
    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-sqs
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: '1.11.978'
    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-s3
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.20'
    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-cloudwatch
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-cloudwatch', version: '1.12.218'
    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20210307'
    // jaxb-api is needed to get rid of warning on run
    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    implementation 'org.junit.platform:junit-platform-launcher:1.8.1'
    implementation project(':protocol')
    implementation project(':validation')
    implementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.9.0'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    // https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api
    compileOnly group: 'javax.websocket', name: 'javax.websocket-api', version: '1.1'
    // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    testImplementation testFixtures(project(':protocol'))
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

gretty {
    servletContainer = 'tomcat9'
    contextPath = '/'
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'scripts/pre-commit')
    into { new File(rootProject.rootDir, '../.git/hooks') }
    fileMode 0777
}

clean.doFirst {
    delete "${projectDir}/src/main/resources/jars"
}

build.dependsOn installGitHook
build.dependsOn buildZip

afterEvaluate {
    // List of projects to generate jars for along with their specific fat-jar task names
    def projects = [
            [':neighborhood', 'buildNeighborhood'],
            [':theater', 'buildTheater'],
            [':playground', 'buildPlayground'],
            [':studentlib', 'buildStudentlib'],
            [':validation', 'buildValidation'],
            [':lang', 'buildLang']
    ]

    // Clean and build before a production deploy
    tasks.compileJava.dependsOn clean

    // Clean and build before setting up the local server
    tasks.prepareInplaceWebAppFolder.dependsOn clean

    projects.each {
        def projectName = it[0]
        def jarTask = it[1]
        // Fully build each project for a production deploy
        tasks.processResources.dependsOn project(projectName).getTasksByName('build', false)

        // Only generate each project's jar for local server
        tasks.prepareInplaceWebAppFolder.dependsOn project(projectName).getTasksByName(jarTask, false)

        // Ensure all tasks happen after clean
        project(projectName).getAllTasks(false).each {
            it.getValue().each { it.dependsOn clean }
        }
    }
}

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Provision an instance of the Javabuilder service. Empty the ContentBucket before deleting this Stack.
Parameters:
  BaseDomainName:
    Type: String
    Description: Base domain name (e.g. 'code.org' in 'javabuilder.code.org').
  BaseDomainNameHostedZonedID:
    Type: String
    Description: AWS Route53 Hosted Zone ID for base domain name.
  SubdomainName:
    Type: String
    Description: Subdomain name for javabuilder service (e.g. 'javabuilder' in 'javabuilder.code.org').
  # LogBucket:
  #   Type: String
  #   Default: cdo-logs.s3.amazonaws.com
  ProvisionedConcurrentExecutions:
    Type: Number
    Description: The amount of provisioned concurrency to allocate for the BuildAndRunJavaProject Lambda.
    MinValue: 1
    Default: 1
  ReservedConcurrentExecutions:
    Type: Number
    Description: The amount of concurrency to allow for the BuildAndRunJavaProject Lambda.
    MinValue: 1
    Default: 3
  LimitPerHour:
    Type: Number
    Description: The number of Javabuilder invocations allowed per user per hour. If the value is -1, then there is no limit on the number of invocations per hour.
    MinValue: -1
    Default: 50
  LimitPerDay:
    Type: Number
    Description: The number of Javabuilder invocations allowed per user per day. If the value is -1, then there is no limit on the number of invocations per day.
    MinValue: -1
    Default: 150
  TeacherLimitPerHour:
    Type: Number
    Description: The number of Javabuilder invocations allowed for all students in a classroom per hour.
    MinValue: 1
    Default: 5000
  StageName:
    Type: String
    Description: The default stage name in the API Gateway APIs
    Default: Prod
  SilenceAlerts:
    Type: String
    AllowedValues: [true, false]
    Description: If alerts should be silenced on this instance
    Default: false
  HighConcurrentExecutionsTopic:
    Type: String
    Description: The name of the SNS topic to publish to for a high concurrent executions alarm.
    Default: CDO-Urgent
  HighConcurrentExecutionsAlarmThreshold:
    Type: Number
    Description: The threshold for the high concurrent executions alarm.
    Default: 400
Globals:
  Function:
    Runtime: ruby3.2
    Timeout: 30
    MemorySize: 256
    Tracing: Active
Conditions:
  IsDevCondition: !Equals [!Ref BaseDomainName, "dev-code.org"]
  SilenceAlertsCondition: !Or [Condition: IsDevCondition, !Equals [!Ref SilenceAlerts, "true"]]
Resources:
# Note: We can't update the name of a DomainName resource once it has been created because the
# domain name itself has already been provisioned. When we change from javabuilderbeta to
# javabuilder, we should update the WebSocket resources here to use the prefix "WebSocket"
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${SubdomainName}-http.${BaseDomainName}"
      ProtocolType: HTTP

  PutRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: PUT /seedsources/sources.json
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref HttpAuthorizer
      OperationName: PutRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref PutIntegration

  PutSourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Puts user sources into the S3 bucket
      CodeUri: api-gateway-routes/
      Handler: api_gateway_put_function.lambda_handler
      Role: !ImportValue JavabuilderPutSourcesLambdaRole
      Environment:
        Variables:
          CONTENT_BUCKET_NAME: !Ref ContentBucket

  PutSourcesPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PutSourcesFunction
      Principal: apigateway.amazonaws.com

  PutIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: PUT Integration
      # Integration method must be POST for AWS_PROXY integrations even though we're PUTting into an S3 bucket
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutSourcesFunction.Arn}/invocations
      PayloadFormatVersion: 2.0

  HttpStageLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/accesslog/${SubdomainName}-http.${BaseDomainName}"

  HttpStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      # Using AutoDeploy rather than a Deployment resource (as we do with the WebSocket API) because
      # the Deployment resource doesn't seem to work with HTTP APIs.
      AutoDeploy: true
      StageName: !Sub "${StageName}"
      Description: The stage to deploy
      ApiId: !Ref HttpApi
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
      AccessLogSettings:
        DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/accesslog/${SubdomainName}-http.${BaseDomainName}"
        # TODO: Also log authorizer status code, authorizer error message, Javabuilder session id, and Origin.
        Format: '{
            "host": "$context.domainName",
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "requestTime": "$context.requestTime",
            "httpMethod": "$context.httpMethod",
            "caller": "$context.identity.caller",
            "routeKey": "$context.routeKey",
            "status": "$context.status",
            "protocol": "$context.protocol",
            "userAgent": "$context.identity.userAgent",
            "responseLength":"$context.responseLength",
            "contextErrorMessage": "$context.error.message",
            "contextErrorMessageString": "$context.error.messageString",
            "integrationError": "$context.integration.error",
            "authorizerError": "$context.authorizer.error"
          }'

  HttpAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref HttpApi
      AuthorizerCredentialsArn:
        Fn::ImportValue: JavabuilderAPIGatewayRole
      AuthorizerPayloadFormatVersion: 2.0
      AuthorizerResultTtlInSeconds: 0
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpAuthorizerLambda.Arn}/invocations"
      IdentitySource:
        - "$request.querystring.Authorization"
      Name: HttpAuthorizer

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${SubdomainName}.${BaseDomainName}"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketAuthorizer
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketAuthorizerLambda.Arn}/invocations"
      IdentitySource:
        - route.request.querystring.Authorization
      Name: WebSocketAuthorizer

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSessionAndRelayMessagesFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: DefaultIntegration

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Lambda Proxy Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSessionAndRelayMessagesFunction.Arn}/invocations"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSessionAndRelayMessagesFunction.Arn}/invocations

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DefaultRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Sub "${StageName}"
      Description: The stage to deploy
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: false
      AccessLogSettings:
        DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/accesslog/${SubdomainName}.${BaseDomainName}"
        # TODO: Also log authorizer status code, authorizer error message, Javabuilder session id, and Origin.
        Format: '{
            "host": "$context.domainName",
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "requestTime": "$context.requestTime",
            "method": "$context.httpMethod",
            "caller": "$context.identity.caller",
            "eventType": "$context.eventType",
            "routeKey": "$context.routeKey",
            "status": "$context.status",
            "connectionId": "$context.connectionId",
            "protocol": "$context.protocol",
            "userAgent": "$context.identity.userAgent",
            "contextErrorMessage": "$context.error.message",
            "contextErrorMessageString": "$context.error.messageString",
            "integrationError": "$context.integration.error",
            "authorizerError": "$context.authorizer.error"
          }'

  StartSessionAndRelayMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Starts the long-running Lambda that compiles and runs a JavaLab project and relays messages to it from the JavaLab client.
      CodeUri: api-gateway-routes/
      Handler: api_gateway_proxy_function.lambda_handler
      Role: !ImportValue JavabuilderSessionManagerMessageRelayLambdaRole
      Environment:
        Variables:
          # The Logical ID of the BuildAndRun Lambda Alias, which is generated by SAM because AutoPublishAlias is enabled
          # has a predictable format: <function‑LogicalId>Alias<alias‑name>
          # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources-function.html#sam-specification-generated-resources-function-autopublishalias
          BUILD_AND_RUN_THEATER_PROJECT_LAMBDA_ARN: !Ref BuildAndRunJavaTheaterProjectFunctionAliaslive
          BUILD_AND_RUN_NEIGHBORHOOD_PROJECT_LAMBDA_ARN: !Ref BuildAndRunJavaNeighborhoodProjectFunctionAliaslive
          BUILD_AND_RUN_CONSOLE_PROJECT_LAMBDA_ARN: !Ref BuildAndRunJavaConsoleProjectFunctionAliaslive

  StartSessionAndRelayMessagesPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartSessionAndRelayMessagesFunction
      Principal: apigateway.amazonaws.com

# Note: hourly and daily limit values provided to both authorizers here as environment variables,
# but are only needed in the HTTP authorizer.
# Both authorizers need to access the token_status DynamoDB table, but only the HTTP authorizer
# needs to access to the other tables.
  HttpAuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: http_authorizer_function.lambda_handler
      CodeUri: javabuilder-authorizer/
      Description: 'Authorize PUT by decoding JWT in Authorization querystring parameter.'
      Timeout: 3
      Role: !ImportValue JavabuilderAuthorizerLambdaRole
      Environment:
        Variables:
          limit_per_hour: !Ref LimitPerHour
          limit_per_day: !Ref LimitPerDay
          teacher_limit_per_hour: !Ref TeacherLimitPerHour
          blocked_users_table: !Ref BlockedUsersTable
          token_status_table: !Ref TokenStatusTable
          user_requests_table: !Ref UserRequestsTable
          teacher_associated_requests_table: !Ref TeacherAssociatedRequestsTable

  HttpAuthorizerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - HttpAuthorizer
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HttpAuthorizerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/authorizers/${HttpAuthorizer}"

  WebSocketAuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: websocket_authorizer_function.lambda_handler
      CodeUri: javabuilder-authorizer/
      Description: 'Authorize WebSocket connect by decoding JWT in Authorization querystring parameter.'
      Timeout: 3
      Role: !ImportValue JavabuilderAuthorizerLambdaRole
      Environment:
        Variables:
          limit_per_hour: !Ref LimitPerHour
          limit_per_day: !Ref LimitPerDay
          teacher_limit_per_hour: !Ref TeacherLimitPerHour
          blocked_users_table: !Ref BlockedUsersTable
          token_status_table: !Ref TokenStatusTable
          user_requests_table: !Ref UserRequestsTable
          teacher_associated_requests_table: !Ref TeacherAssociatedRequestsTable

  WebSocketAuthorizerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAuthorizer
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketAuthorizerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/authorizers/${WebSocketAuthorizer}"

  ChangeJavaRuntimeDirectoryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - java11
      ContentUri: org-code-javabuilder/change_runtime_directory
      Description: Change Java runtime to launch from the writeable /tmp directory to enable student projects to write files more easily.
      LayerName: change-java-runtime-directory

  FontConfigurationLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - java11
      ContentUri: org-code-javabuilder/font_config.zip
      Description: Add a font configuration file to enable use of fonts.
      LayerName: font-configuration

  BuildAndRunJavaTheaterProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref FontConfigurationLayer
        - !Ref ChangeJavaRuntimeDirectoryLayer
      Handler: org.code.javabuilder.LambdaRequestHandler::handleRequest
      Runtime: java11
      CodeUri: org-code-javabuilder/lib/build/distributions/lib.zip
      AutoPublishAlias: live
      ReservedConcurrentExecutions: !Ref ReservedConcurrentExecutions
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref ProvisionedConcurrentExecutions
      Description: Compile and execute a JavaLab Theater project.
      MemorySize: 1769
      Timeout: 90
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Role:
        Fn::ImportValue: JavabuilderBuildAndRunLambdaRole
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/change_runtime_directory
          CONTENT_BUCKET_NAME: !Ref ContentBucket
          CONTENT_BUCKET_URL: !Sub "https://${ContentCDN.DomainName}"
          API_ENDPOINT: !Sub
            - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
            - ApiId: !Ref WebSocketApi
          UNHEALTHY_CONTAINERS_TABLE_NAME: !Ref UnhealthyContainersTable
  BuildAndRunJavaNeighborhoodProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref FontConfigurationLayer
        - !Ref ChangeJavaRuntimeDirectoryLayer
      Handler: org.code.javabuilder.LambdaRequestHandler::handleRequest
      Runtime: java11
      CodeUri: org-code-javabuilder/lib/build/distributions/lib.zip
      AutoPublishAlias: live
      ReservedConcurrentExecutions: !Ref ReservedConcurrentExecutions
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref ProvisionedConcurrentExecutions
      Description: Compile and execute a JavaLab Neighborhood project.
      MemorySize: 512
      Timeout: 120
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Role:
        Fn::ImportValue: JavabuilderBuildAndRunLambdaRole
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/change_runtime_directory
          CONTENT_BUCKET_NAME: !Ref ContentBucket
          CONTENT_BUCKET_URL: !Sub "https://${ContentCDN.DomainName}"
          API_ENDPOINT: !Sub
            - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
            - ApiId: !Ref WebSocketApi
          UNHEALTHY_CONTAINERS_TABLE_NAME: !Ref UnhealthyContainersTable
  BuildAndRunJavaConsoleProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref FontConfigurationLayer
        - !Ref ChangeJavaRuntimeDirectoryLayer
      Handler: org.code.javabuilder.LambdaRequestHandler::handleRequest
      Runtime: java11
      CodeUri: org-code-javabuilder/lib/build/distributions/lib.zip
      AutoPublishAlias: live
      ReservedConcurrentExecutions: !Ref ReservedConcurrentExecutions
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref ProvisionedConcurrentExecutions
      Description: Compile and execute a JavaLab Console project.
      MemorySize: 512
      Timeout: 90
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Role:
        Fn::ImportValue: JavabuilderBuildAndRunLambdaRole
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/change_runtime_directory
          CONTENT_BUCKET_NAME: !Ref ContentBucket
          CONTENT_BUCKET_URL: !Sub "https://${ContentCDN.DomainName}"
          API_ENDPOINT: !Sub
            - "https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
            - ApiId: !Ref WebSocketApi
          UNHEALTHY_CONTAINERS_TABLE_NAME: !Ref UnhealthyContainersTable

  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If [IsDevCondition, !Sub "cdo-dev-${SubdomainName}-content", !Sub "cdo-${SubdomainName}-content"]
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: 1

  ContentCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ErrorCachingMinTTL: 0
        # TODO: enable logging when LogBucket is set up
        # Logging:
        #   Bucket: !Ref LogBucket
        #   IncludeCookies: false
        #   Prefix: !Sub "${SubdomainName}-content.${BaseDomainName}"
        Origins:
          - Id: ContentBucket
            DomainName: !GetAtt ContentBucket.RegionalDomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: ContentBucket
          AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
          Compress: true
          DefaultTTL: 0
          ForwardedValues: {QueryString: true}
          ViewerProtocolPolicy: redirect-to-https

  TheaterTenPercentSevereErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_ten_percent_severe_error_rate"
      AlarmDescription: Severe error rate in Javabuilder's Theater build and run lambda (the core of
          Javabuilder, which executes student Theater code) exceeded 10% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Error Rate (%)
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: SevereError
                    Dimensions:
                      - Name: functionName
                        Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum
  TheaterNinetyPercentSevereErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_ninety_percent_severe_error_rate"
      AlarmDescription: Severe error rate in Javabuilder's Theater build and run lambda (the core of
          Javabuilder, which executes student Theater code) exceeded 90% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Error Rate (%)
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: SevereError
                    Dimensions:
                      - Name: functionName
                        Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum



  TheaterTwentyFivePercentErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_twenty_five_percent_error_rate"
      AlarmDescription: Error rate in Javabuilder's Theater build and run lambda (the core of
          Javabuilder, which executes student Theater code) exceeded 25% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 25
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Errors / Invocations
            ReturnData: true
            Expression: ((m1 - m3) / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Errors
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum
          - Id: m3
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Duration
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: TC(89000:)
  TheaterNinetyPercentErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_ninety_percent_error_rate"
      AlarmDescription: Error rate in Javabuilder's Theater build and run lambda (the core of
          Javabuilder, which executes student Theater code) exceeded 90% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Errors / Invocations
            ReturnData: true
            Expression: ((m1 - m3) / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Errors
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: Sum
          - Id: m3
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Duration
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaTheaterProjectFunction
                Period: 300
                Stat: TC(89000:)


  TheaterSlowCleanupTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_slow_cleanup_time"
      AlarmDescription: Average cleanup time in Javabuilder's Theater build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: CleanupTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaTheaterProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 200
      Period: 60
  
  TheaterSlowColdBootTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_slow_cold_boot_time"
      AlarmDescription: Average cold boot time in Javabuilder's Theater build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: ColdBootTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaTheaterProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 10500
      Period: 60

  TheaterSlowInitializationTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_slow_initialization_time"
      AlarmDescription: Average initialization time in Javabuilder's Theater build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: InitializationTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaTheaterProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 5000
      Period: 60

  
  TheaterSlowTransitionTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_theater_slow_transition_time"
        AlarmDescription: Average transition time in Javabuilder's Theater build and run lambda was high for at 
          least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
        InsufficientDataActions: []
        MetricName: TransitionTime
        Namespace: Javabuilder
        Statistic: Average
        Dimensions:
          - Name: functionName
            Value: !Ref BuildAndRunJavaTheaterProjectFunction
        EvaluationPeriods: 20
        DatapointsToAlarm: 15
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Threshold: 2500
        Period: 60

  TheaterMinimumUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_theater_minimum_usage"
        AlarmDescription: This alarm is to be used as part of a composite alarm, not by itself.
            It triggers if the usage is above a minimum threshold, so we do not alarm on error
            rates if we have very low usage.
        ActionsEnabled: false
        MetricName: Invocations
        Namespace: AWS/Lambda
        Statistic: Sum
        Dimensions:
            - Name: FunctionName
              Value: !Ref BuildAndRunJavaTheaterProjectFunction
        Period: 300
        EvaluationPeriods: 4
        DatapointsToAlarm: 4
        Threshold: 100
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching
  
  TheaterSevereErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - TheaterTenPercentSevereErrorRateAlarm
      - TheaterMinimumUsageAlarm
      - TheaterElevatedSevereErrorRateAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_theater_severe_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 10% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained elevated severe error rate is an indication of an issue.
          Severe errors are generated and emitted by our code. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Javabuilder-high-error-rate"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_theater_ten_percent_severe_error_rate) AND 
            ALARM(${SubdomainName}_theater_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
        ActionsSuppressor: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${SubdomainName}_theater_elevated_severe_error_rate"
        ActionsSuppressorWaitPeriod: 120
        ActionsSuppressorExtensionPeriod: 120

  TheaterElevatedSevereErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - TheaterNinetyPercentSevereErrorRateAlarm
      - TheaterMinimumUsageAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_theater_elevated_severe_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 90% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained high severe error rate is an indication of an outage.
          Severe errors are generated and emitted by our code. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_theater_ninety_percent_severe_error_rate) AND 
            ALARM(${SubdomainName}_theater_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
  
  TheaterErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - TheaterTwentyFivePercentErrorRateAlarm
      - TheaterMinimumUsageAlarm
      - TheaterElevatedErrorRateAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_theater_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 25% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained elevated error rate is an indication of an issue.
          Errors are generated by the Lambda system. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Javabuilder-high-error-rate"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_theater_twenty_five_percent_error_rate) AND 
            ALARM(${SubdomainName}_theater_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
        ActionsSuppressor: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${SubdomainName}_theater_elevated_error_rate"
        ActionsSuppressorWaitPeriod: 120
        ActionsSuppressorExtensionPeriod: 120

  TheaterElevatedErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - TheaterNinetyPercentErrorRateAlarm
      - TheaterMinimumUsageAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_theater_elevated_error_rate"
        AlarmDescription: Alarm if Javabuilder error rate exceeds 90% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained high error rate is an indication of an outage.
          Errors are generated by the Lambda system. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_theater_ninety_percent_error_rate) AND 
            ALARM(${SubdomainName}_theater_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
  
  TheaterHighConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_theater_high_concurrent_executions"
      AlarmDescription: !Sub |
          Alarm if javabuilder usage has high concurrent executions for 10 minutes.
          Occasional spikes are expected, but long-running high usage is an indication
          of an attack. If this is occuring on the demo environment, this is a non-urgent
          issue as we expect occasional periods of high usage. If it is on production, 
          page the student learning team for further investigation. See this doc for investigation steps
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.xs1gcuxrw6ze
      ActionsEnabled: true
      AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${HighConcurrentExecutionsTopic}"]
      EvaluationPeriods: 10
      DatapointsToAlarm: 10
      Period: 60
      Threshold: !Ref HighConcurrentExecutionsAlarmThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Statistic: Maximum
      Dimensions:
        - Name: FunctionName
          Value: !Ref BuildAndRunJavaTheaterProjectFunction
  NeighborhoodTenPercentSevereErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_ten_percent_severe_error_rate"
      AlarmDescription: Severe error rate in Javabuilder's Neighborhood build and run lambda (the core of
          Javabuilder, which executes student Neighborhood code) exceeded 10% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Error Rate (%)
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: SevereError
                    Dimensions:
                      - Name: functionName
                        Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum
  NeighborhoodNinetyPercentSevereErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_ninety_percent_severe_error_rate"
      AlarmDescription: Severe error rate in Javabuilder's Neighborhood build and run lambda (the core of
          Javabuilder, which executes student Neighborhood code) exceeded 90% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Error Rate (%)
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: SevereError
                    Dimensions:
                      - Name: functionName
                        Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum



  NeighborhoodTwentyFivePercentErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_twenty_five_percent_error_rate"
      AlarmDescription: Error rate in Javabuilder's Neighborhood build and run lambda (the core of
          Javabuilder, which executes student Neighborhood code) exceeded 25% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 25
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Errors / Invocations
            ReturnData: true
            Expression: ((m1 - m3) / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Errors
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum
          - Id: m3
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Duration
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: TC(89000:)
  NeighborhoodNinetyPercentErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_ninety_percent_error_rate"
      AlarmDescription: Error rate in Javabuilder's Neighborhood build and run lambda (the core of
          Javabuilder, which executes student Neighborhood code) exceeded 90% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Errors / Invocations
            ReturnData: true
            Expression: ((m1 - m3) / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Errors
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: Sum
          - Id: m3
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Duration
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
                Period: 300
                Stat: TC(89000:)


  NeighborhoodSlowCleanupTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_slow_cleanup_time"
      AlarmDescription: Average cleanup time in Javabuilder's Neighborhood build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: CleanupTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 200
      Period: 60
  
  NeighborhoodSlowColdBootTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_slow_cold_boot_time"
      AlarmDescription: Average cold boot time in Javabuilder's Neighborhood build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: ColdBootTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 10500
      Period: 60

  NeighborhoodSlowInitializationTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_slow_initialization_time"
      AlarmDescription: Average initialization time in Javabuilder's Neighborhood build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: InitializationTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 5000
      Period: 60

  
  NeighborhoodSlowTransitionTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_neighborhood_slow_transition_time"
        AlarmDescription: Average transition time in Javabuilder's Neighborhood build and run lambda was high for at 
          least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
        InsufficientDataActions: []
        MetricName: TransitionTime
        Namespace: Javabuilder
        Statistic: Average
        Dimensions:
          - Name: functionName
            Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
        EvaluationPeriods: 20
        DatapointsToAlarm: 15
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Threshold: 2500
        Period: 60

  NeighborhoodMinimumUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_neighborhood_minimum_usage"
        AlarmDescription: This alarm is to be used as part of a composite alarm, not by itself.
            It triggers if the usage is above a minimum threshold, so we do not alarm on error
            rates if we have very low usage.
        ActionsEnabled: false
        MetricName: Invocations
        Namespace: AWS/Lambda
        Statistic: Sum
        Dimensions:
            - Name: FunctionName
              Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
        Period: 300
        EvaluationPeriods: 4
        DatapointsToAlarm: 4
        Threshold: 100
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching
  
  NeighborhoodSevereErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - NeighborhoodTenPercentSevereErrorRateAlarm
      - NeighborhoodMinimumUsageAlarm
      - NeighborhoodElevatedSevereErrorRateAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_neighborhood_severe_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 10% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained elevated severe error rate is an indication of an issue.
          Severe errors are generated and emitted by our code. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Javabuilder-high-error-rate"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_neighborhood_ten_percent_severe_error_rate) AND 
            ALARM(${SubdomainName}_neighborhood_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
        ActionsSuppressor: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${SubdomainName}_neighborhood_elevated_severe_error_rate"
        ActionsSuppressorWaitPeriod: 120
        ActionsSuppressorExtensionPeriod: 120

  NeighborhoodElevatedSevereErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - NeighborhoodNinetyPercentSevereErrorRateAlarm
      - NeighborhoodMinimumUsageAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_neighborhood_elevated_severe_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 90% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained high severe error rate is an indication of an outage.
          Severe errors are generated and emitted by our code. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_neighborhood_ninety_percent_severe_error_rate) AND 
            ALARM(${SubdomainName}_neighborhood_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
  
  NeighborhoodErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - NeighborhoodTwentyFivePercentErrorRateAlarm
      - NeighborhoodMinimumUsageAlarm
      - NeighborhoodElevatedErrorRateAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_neighborhood_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 25% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained elevated error rate is an indication of an issue.
          Errors are generated by the Lambda system. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Javabuilder-high-error-rate"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_neighborhood_twenty_five_percent_error_rate) AND 
            ALARM(${SubdomainName}_neighborhood_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
        ActionsSuppressor: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${SubdomainName}_neighborhood_elevated_error_rate"
        ActionsSuppressorWaitPeriod: 120
        ActionsSuppressorExtensionPeriod: 120

  NeighborhoodElevatedErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - NeighborhoodNinetyPercentErrorRateAlarm
      - NeighborhoodMinimumUsageAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_neighborhood_elevated_error_rate"
        AlarmDescription: Alarm if Javabuilder error rate exceeds 90% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained high error rate is an indication of an outage.
          Errors are generated by the Lambda system. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_neighborhood_ninety_percent_error_rate) AND 
            ALARM(${SubdomainName}_neighborhood_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
  
  NeighborhoodHighConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_neighborhood_high_concurrent_executions"
      AlarmDescription: !Sub |
          Alarm if javabuilder usage has high concurrent executions for 10 minutes.
          Occasional spikes are expected, but long-running high usage is an indication
          of an attack. If this is occuring on the demo environment, this is a non-urgent
          issue as we expect occasional periods of high usage. If it is on production, 
          page the student learning team for further investigation. See this doc for investigation steps
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.xs1gcuxrw6ze
      ActionsEnabled: true
      AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${HighConcurrentExecutionsTopic}"]
      EvaluationPeriods: 10
      DatapointsToAlarm: 10
      Period: 60
      Threshold: !Ref HighConcurrentExecutionsAlarmThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Statistic: Maximum
      Dimensions:
        - Name: FunctionName
          Value: !Ref BuildAndRunJavaNeighborhoodProjectFunction
  ConsoleTenPercentSevereErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_ten_percent_severe_error_rate"
      AlarmDescription: Severe error rate in Javabuilder's Console build and run lambda (the core of
          Javabuilder, which executes student Console code) exceeded 10% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Error Rate (%)
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: SevereError
                    Dimensions:
                      - Name: functionName
                        Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum
  ConsoleNinetyPercentSevereErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_ninety_percent_severe_error_rate"
      AlarmDescription: Severe error rate in Javabuilder's Console build and run lambda (the core of
          Javabuilder, which executes student Console code) exceeded 90% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Error Rate (%)
            ReturnData: true
            Expression: (m1 / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: Javabuilder
                    MetricName: SevereError
                    Dimensions:
                      - Name: functionName
                        Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum



  ConsoleTwentyFivePercentErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_twenty_five_percent_error_rate"
      AlarmDescription: Error rate in Javabuilder's Console build and run lambda (the core of
          Javabuilder, which executes student Console code) exceeded 25% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 25
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Errors / Invocations
            ReturnData: true
            Expression: ((m1 - m3) / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Errors
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum
          - Id: m3
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Duration
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: TC(89000:)
  ConsoleNinetyPercentErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_ninety_percent_error_rate"
      AlarmDescription: Error rate in Javabuilder's Console build and run lambda (the core of
          Javabuilder, which executes student Console code) exceeded 90% for four
          consecutive 5 minute periods.
      ActionsEnabled: false
      EvaluationPeriods: 4
      DatapointsToAlarm: 4
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
          - Id: e1
            Label: Errors / Invocations
            ReturnData: true
            Expression: ((m1 - m3) / m2) * 100
          - Id: m1
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Errors
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum
          - Id: m2
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Invocations
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: Sum
          - Id: m3
            ReturnData: false
            MetricStat:
                Metric:
                    Namespace: AWS/Lambda
                    MetricName: Duration
                    Dimensions:
                        - Name: FunctionName
                          Value: !Ref BuildAndRunJavaConsoleProjectFunction
                Period: 300
                Stat: TC(89000:)


  ConsoleSlowCleanupTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_slow_cleanup_time"
      AlarmDescription: Average cleanup time in Javabuilder's Console build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: CleanupTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaConsoleProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 200
      Period: 60
  
  ConsoleSlowColdBootTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_slow_cold_boot_time"
      AlarmDescription: Average cold boot time in Javabuilder's Console build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: ColdBootTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaConsoleProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 10500
      Period: 60

  ConsoleSlowInitializationTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_slow_initialization_time"
      AlarmDescription: Average initialization time in Javabuilder's Console build and run lambda was high for at 
        least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
      InsufficientDataActions: []
      MetricName: InitializationTime
      Namespace: Javabuilder
      Statistic: Average
      Dimensions:
        - Name: functionName
          Value: !Ref BuildAndRunJavaConsoleProjectFunction
      EvaluationPeriods: 20
      DatapointsToAlarm: 15
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Threshold: 5000
      Period: 60

  
  ConsoleSlowTransitionTimeAlarm:    
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_console_slow_transition_time"
        AlarmDescription: Average transition time in Javabuilder's Console build and run lambda was high for at 
          least 15 out of the last 20 minutes. Investigate if there has been a performance regression.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-slow-performance"]
        InsufficientDataActions: []
        MetricName: TransitionTime
        Namespace: Javabuilder
        Statistic: Average
        Dimensions:
          - Name: functionName
            Value: !Ref BuildAndRunJavaConsoleProjectFunction
        EvaluationPeriods: 20
        DatapointsToAlarm: 15
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
        Threshold: 2500
        Period: 60

  ConsoleMinimumUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_console_minimum_usage"
        AlarmDescription: This alarm is to be used as part of a composite alarm, not by itself.
            It triggers if the usage is above a minimum threshold, so we do not alarm on error
            rates if we have very low usage.
        ActionsEnabled: false
        MetricName: Invocations
        Namespace: AWS/Lambda
        Statistic: Sum
        Dimensions:
            - Name: FunctionName
              Value: !Ref BuildAndRunJavaConsoleProjectFunction
        Period: 300
        EvaluationPeriods: 4
        DatapointsToAlarm: 4
        Threshold: 100
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching
  
  ConsoleSevereErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - ConsoleTenPercentSevereErrorRateAlarm
      - ConsoleMinimumUsageAlarm
      - ConsoleElevatedSevereErrorRateAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_console_severe_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 10% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained elevated severe error rate is an indication of an issue.
          Severe errors are generated and emitted by our code. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Javabuilder-high-error-rate"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_console_ten_percent_severe_error_rate) AND 
            ALARM(${SubdomainName}_console_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
        ActionsSuppressor: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${SubdomainName}_console_elevated_severe_error_rate"
        ActionsSuppressorWaitPeriod: 120
        ActionsSuppressorExtensionPeriod: 120

  ConsoleElevatedSevereErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - ConsoleNinetyPercentSevereErrorRateAlarm
      - ConsoleMinimumUsageAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_console_elevated_severe_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 90% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained high severe error rate is an indication of an outage.
          Severe errors are generated and emitted by our code. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_console_ninety_percent_severe_error_rate) AND 
            ALARM(${SubdomainName}_console_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
  
  ConsoleErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - ConsoleTwentyFivePercentErrorRateAlarm
      - ConsoleMinimumUsageAlarm
      - ConsoleElevatedErrorRateAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_console_error_rate"
        AlarmDescription: Alarm if Javabuilder severe error rate exceeds 25% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained elevated error rate is an indication of an issue.
          Errors are generated by the Lambda system. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Javabuilder-high-error-rate"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_console_twenty_five_percent_error_rate) AND 
            ALARM(${SubdomainName}_console_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
        ActionsSuppressor: !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${SubdomainName}_console_elevated_error_rate"
        ActionsSuppressorWaitPeriod: 120
        ActionsSuppressorExtensionPeriod: 120

  ConsoleElevatedErrorRateAlarm:
    Type: AWS::CloudWatch::CompositeAlarm
    DependsOn:
      - ConsoleNinetyPercentErrorRateAlarm
      - ConsoleMinimumUsageAlarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_console_elevated_error_rate"
        AlarmDescription: Alarm if Javabuilder error rate exceeds 90% every 5 minutes for 20
          minutes and there are at least 100 requests every 5 minutes. 
          Occasional spikes are expected, but a sustained high error rate is an indication of an outage.
          Errors are generated by the Lambda system. Please follow the instructions in this document to mitigate
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.2gh4dxmz643n
        ActionsEnabled: true
        AlarmActions:
            - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CDO-Urgent"]
        AlarmRule: !Sub "ALARM(${SubdomainName}_console_ninety_percent_error_rate) AND 
            ALARM(${SubdomainName}_console_minimum_usage)"
        InsufficientDataActions: []
        OKActions: []
  
  ConsoleHighConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${SubdomainName}_console_high_concurrent_executions"
      AlarmDescription: !Sub |
          Alarm if javabuilder usage has high concurrent executions for 10 minutes.
          Occasional spikes are expected, but long-running high usage is an indication
          of an attack. If this is occuring on the demo environment, this is a non-urgent
          issue as we expect occasional periods of high usage. If it is on production, 
          page the student learning team for further investigation. See this doc for investigation steps
          https://docs.google.com/document/d/1bHvV6pvUcwxgZpw0YWBmxFggQL5KqYx9zwolwkZhjU8/edit#bookmark=id.xs1gcuxrw6ze
      ActionsEnabled: true
      AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${HighConcurrentExecutionsTopic}"]
      EvaluationPeriods: 10
      DatapointsToAlarm: 10
      Period: 60
      Threshold: !Ref HighConcurrentExecutionsAlarmThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Statistic: Maximum
      Dimensions:
        - Name: FunctionName
          Value: !Ref BuildAndRunJavaConsoleProjectFunction

# We use shortened versions of names for partition keys (eg, user_id),
# but values will be a concatenation of the domain name and appropriate ID.
# Values will look something like:
# studio.code.org#123456 (user_requests table)
# studio.code.org#UserId#123456 (blocked_users table)
  BlockedUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubdomainName}_blocked_users"
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: "S"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  TokenStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubdomainName}_tokens"
      KeySchema:
        - AttributeName: token_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: token_id
          AttributeType: "S"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  UserRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubdomainName}_user_requests"
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: issued_at
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: "S"
        - AttributeName: issued_at
          AttributeType: "N"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  TeacherAssociatedRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SubdomainName}_teacher_associated_requests"
      KeySchema:
        - AttributeName: section_owner_id
          KeyType: HASH
        - AttributeName: issued_at
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: section_owner_id
          AttributeType: "S"
        - AttributeName: issued_at
          AttributeType: "N"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  UnhealthyContainersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub "${SubdomainName}_unhealthy_containers"
        KeySchema:
          - AttributeName: container_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: container_id
            AttributeType: "S"

  HighUsersBlockedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_high_users_blocked"
        AlarmDescription: Unusually high number of users being newly blocked by our throttling
            thresholds.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-high-throttling"]
        InsufficientDataActions: []
        MetricName: NewUserBlocked
        Namespace: Javabuilder
        Statistic: Sum
        Dimensions:
            - Name: functionName
              Value: !Ref HttpAuthorizerLambda
        Period: 60
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: 100
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

  ClassroomBlockedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_classroom_blocked"
        AlarmDescription: A classroom was newly blocked by our threshold. Investigate if this is classroom should be blocked.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-high-throttling"]
        InsufficientDataActions: []
        MetricName: NewClassroomBlocked
        Namespace: Javabuilder
        Statistic: Sum
        Dimensions:
            - Name: functionName
              Value: !Ref HttpAuthorizerLambda
        Period: 60
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching

  HighUnknownTokensAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_high_unknown_tokens"
        AlarmDescription: Websocket authorizer is receiving connection requests using
            tokens that did not pass through the HTTP authorizer first.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-high-token-errors"]
        InsufficientDataActions: []
        MetricName: TokenUnknownId
        Namespace: Javabuilder
        Statistic: Sum
        Dimensions:
            - Name: functionName
              Value: !Ref WebSocketAuthorizerLambda
        Period: 60
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: 100
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

  HighUnvettedTokensAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_high_unvetted_tokens"
        AlarmDescription: Websocket authorizer is receiving connection requests using
            tokens that were observed but not vetted as valid by the HTTP authorizer.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-high-token-errors"]
        InsufficientDataActions: []
        MetricName: TokenNotVetted
        Namespace: Javabuilder
        Statistic: Sum
        Dimensions:
            - Name: functionName
              Value: !Ref WebSocketAuthorizerLambda
        Period: 60
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: 100
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

  WebsocketHighUsedTokensAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_websocket_high_used_tokens"
        AlarmDescription: Websocket authorizer is receiving connection requests using
            tokens have already been used.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-high-token-errors"]
        InsufficientDataActions: []
        MetricName: TokenUsed
        Namespace: Javabuilder
        Statistic: Sum
        Dimensions:
            - Name: functionName
              Value: !Ref WebSocketAuthorizerLambda
        Period: 60
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: 100
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

  HttpHighUsedTokensAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub "${SubdomainName}_http_high_used_tokens"
        AlarmDescription: HTTP authorizer is receiving connection requests using
            tokens have already been used.
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !If [SilenceAlertsCondition, !Ref AWS::NoValue, !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:javabuilder-high-token-errors"]
        InsufficientDataActions: []
        MetricName: TokenUsed
        Namespace: Javabuilder
        Statistic: Sum
        Dimensions:
            - Name: functionName
              Value: !Ref HttpAuthorizerLambda
        Period: 60
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: 100
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

Outputs:
  JavabuilderURL:
    Value:
      Fn::Sub: wss://${SubdomainName}.${BaseDomainName}

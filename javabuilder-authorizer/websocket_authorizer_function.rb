require 'aws-sdk-lambda'
require 'aws-sdk-dynamodb'
require 'jwt'
require_relative 'jwt_helper'
include JwtHelper

# The lambda handler takes an event with the query string parameter 'Authorization=token',
# where the token is a JWT token generated by dashboard or a string indicating this is
# a basic connection test from a user. It checks the validity of the token and returns
# a policy that either allows or disallows the user from continuing to Javabuilder. This
# authorizer is specialized to work with AWS API Gateway WebSocket APIs.
def lambda_handler(event:, context:)
  origin = event['headers']['Origin']
  jwt_token = event['queryStringParameters']['Authorization']
  method_arn = event['methodArn']
  # Return early if this is the user connectivity test
  if jwt_token == 'connectivityTest'
    return JwtHelper.generate_policy('connectivityTest', "Allow", method_arn, {connectivityTest: true})
  end


  decoded_token = JwtHelper.decode_token(jwt_token, origin)
  puts decoded_token
  sid = decoded_token[0]['sid']
  validate_token(context, sid)
  return JwtHelper.generate_deny(method_arn) unless decoded_token
  return JwtHelper.generate_allow(method_arn, decoded_token)
end

def validate_token(context, sid)
  puts 'validating websocket token'
  client = Aws::DynamoDB::Client.new(region: get_region(context))
  response = client.get_item(
    table_name: ENV['token_status_table'],
    key: {token_id: sid}
  )

  # return false when for real
  # need to handle response/item being nil
  unless response.item
    puts "GET TOKEN ERROR: unknown token id" unless response.item
    return true
  end

  unless response.item['vetted']
    puts "TOKEN ERROR: not vetted"
    return true
  end

  if response.item['used']
    puts "TOKEN ERROR: reused"
    return true
  end

  # return_values not necessary, only for debugging
  response = client.update_item(
    table_name: ENV['token_status_table'],
    key: {token_id: sid},
    update_expression: 'SET used = :u',
    expression_attribute_values: {':u': true}
  )
  true
end

# ARN is of the format arn:aws:lambda:{region}:{account_id}:function:{lambda_name}
def get_region(context)
  context.invoked_function_arn.split(':')[3]
end
